/*
 * Copyright 2014 the original author or authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.foreach.across.modules.entity.views.processors;

import com.foreach.across.core.annotations.Exposed;
import com.foreach.across.modules.entity.EntityAttributes;
import com.foreach.across.modules.entity.registry.properties.EntityPropertyDescriptor;
import com.foreach.across.modules.entity.registry.properties.EntityPropertySelector;
import com.foreach.across.modules.entity.views.EntityView;
import com.foreach.across.modules.entity.views.EntityViewElementBuilderService;
import com.foreach.across.modules.entity.views.ViewElementMode;
import com.foreach.across.modules.entity.views.bootstrapui.processors.element.EntityPropertyControlNamePostProcessor;
import com.foreach.across.modules.entity.views.processors.support.ViewElementBuilderMap;
import com.foreach.across.modules.entity.views.request.EntityViewCommand;
import com.foreach.across.modules.entity.views.request.EntityViewRequest;
import com.foreach.across.modules.web.ui.ViewElement;
import com.foreach.across.modules.web.ui.ViewElementBuilderContext;
import com.foreach.across.modules.web.ui.elements.builder.ContainerViewElementBuilderSupport;
import lombok.NonNull;
import lombok.Setter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.WebDataBinder;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * Renders one or more registered properties from the {@link com.foreach.across.modules.entity.registry.properties.EntityPropertyRegistry}
 * attached to the {@link com.foreach.across.modules.entity.views.context.EntityViewContext}. Control names generated by these elements
 * will be prefixed as they are expected to represent entity properties.
 * <p/>
 * This processor will first create a {@link java.util.Map} holding the descriptors for all properties requested. This will happen during
 * {@link #initializeCommandObject(EntityViewRequest, EntityViewCommand, WebDataBinder)}.
 * <p/>
 * During {@link #createViewElementBuilders(EntityViewRequest, EntityView, ViewElementBuilderMap)} a {@link ViewElementBuilderMap}
 * instances will be created for the set of property descriptors. This map will be available under the attribute
 * {@link #ATTRIBUTE_PROPERTY_BUILDERS} in the {@link EntityView}.  Following processors can update the builder collection.
 * <p/>
 * During {@link #render(EntityViewRequest, EntityView, ContainerViewElementBuilderSupport, ViewElementBuilderMap, ViewElementBuilderContext)}, the
 * actual {@link ViewElement}s will get created and added to the container.  If the global builderMap contains a builder named
 * {@link #ATTRIBUTE_PROPERTIES_CONTAINER_BUILDER} the elements will get added to that builder, else they will get added to the root container passed as argument.
 * <p/>
 * This processor will prefix the control names of all properties having an {@link EntityAttributes#NATIVE_PROPERTY_DESCRIPTOR} attribute.
 * <p/>
 * Other processors that want to modify either the descriptors or builders collection, can use one of the static methods to get the right collection:
 * <ul>
 * <li>{@link #propertyDescriptors(EntityView)}</li>
 * <li>{@link #propertyDescriptors(EntityViewRequest)}</li>
 * <li>{@link #propertyBuilders(EntityView)}</li>
 * </ul>
 *
 * @author Arne Vandamme
 * @since 2.0.0
 */
@Component
@Exposed
@Scope("prototype")
public class PropertyRenderingViewProcessor extends EntityViewProcessorAdapter
{
	/**
	 * Contains the {@code Map} of property descriptors that were used to create the initial collection
	 * of {@link #ATTRIBUTE_PROPERTY_BUILDERS}. Added during {@link #initializeCommandObject(EntityViewRequest, EntityViewCommand, WebDataBinder)}
	 * and can be modified by other processors. This processor will use the actual value
	 * during {@link #createViewElementBuilders(EntityViewRequest, EntityView, ViewElementBuilderMap)}.
	 */
	public static final String ATTRIBUTE_PROPERTY_DESCRIPTORS = "propertyDescriptors";

	/**
	 * Contains the {@code Map} of {@link com.foreach.across.modules.web.ui.ViewElementBuilder} for the
	 * properties that have been rendered. Unless manually modified, the keys will always
	 * correspond to the keys of the {@link #ATTRIBUTE_PROPERTY_DESCRIPTORS} collection.
	 * Set during {@link #createViewElementBuilders(EntityViewRequest, EntityView, ViewElementBuilderMap)},
	 * the actual value is used during
	 * {@link #render(EntityViewRequest, EntityView, ContainerViewElementBuilderSupport, ViewElementBuilderMap, ViewElementBuilderContext)}.
	 */
	public static final String ATTRIBUTE_PROPERTY_BUILDERS = "propertyBuildersMap";

	// todo: make configurable
	public static final String ATTRIBUTE_PROPERTIES_CONTAINER_BUILDER = "entityForm-column-0";

	private EntityViewElementBuilderService viewElementBuilderService;

	private EntityPropertySelector selector = EntityPropertySelector.of( EntityPropertySelector.READABLE );

	/**
	 * Which type of view elements should be created for the properties?
	 */
	@Setter
	private ViewElementMode viewElementMode = ViewElementMode.FORM_READ;

	/**
	 * Define the properties that should be rendered.
	 * Defaults to all readable properties, a new selector will be combined with the default.  If the new selector
	 * defines the {@link EntityPropertySelector#CONFIGURED} property, the selector will be considered an extension
	 * of the previously registered selector.
	 */
	public void setSelector( EntityPropertySelector selector ) {
		this.selector = this.selector.combine( selector );
	}

	@Override
	public void initializeCommandObject( EntityViewRequest entityViewRequest, EntityViewCommand command, WebDataBinder dataBinder ) {
		List<EntityPropertyDescriptor> properties = entityViewRequest.getEntityViewContext().getPropertyRegistry().select( selector );
		Map<String, EntityPropertyDescriptor> descriptorMap = new LinkedHashMap<>();
		properties.forEach( p -> descriptorMap.put( p.getName(), p ) );
		entityViewRequest.getModel().put( ATTRIBUTE_PROPERTY_DESCRIPTORS, descriptorMap );
	}

	@Override
	protected void createViewElementBuilders( EntityViewRequest entityViewRequest, EntityView entityView, ViewElementBuilderMap builderMap ) {
		ViewElementBuilderMap propertyBuilders = propertyBuilders( entityView );

		propertyDescriptors( entityView )
				.forEach( ( name, descriptor ) -> propertyBuilders.put( name, viewElementBuilderService.getElementBuilder( descriptor, viewElementMode ) ) );
	}

	@Override
	protected void render( EntityViewRequest entityViewRequest,
	                       EntityView entityView,
	                       ContainerViewElementBuilderSupport<?, ?> containerBuilder,
	                       ViewElementBuilderMap builderMap,
	                       ViewElementBuilderContext builderContext ) {
		ViewElementBuilderMap propertyBuilders = entityView.removeAttribute( ATTRIBUTE_PROPERTY_BUILDERS, ViewElementBuilderMap.class );

		if ( propertyBuilders != null ) {
			ContainerViewElementBuilderSupport<?, ?> propertiesContainerBuilder
					= builderMap.containsKey( ATTRIBUTE_PROPERTIES_CONTAINER_BUILDER )
					? builderMap.get( ATTRIBUTE_PROPERTIES_CONTAINER_BUILDER, ContainerViewElementBuilderSupport.class )
					: containerBuilder;

			try {
				builderContext.setAttribute( EntityPropertyControlNamePostProcessor.PREFIX_CONTROL_NAMES, true );
				propertyBuilders.forEach( ( propertyName, builder ) -> {
					propertiesContainerBuilder.add( builder.build( builderContext ) );
				} );
			}
			finally {
				builderContext.removeAttribute( EntityPropertyControlNamePostProcessor.PREFIX_CONTROL_NAMES );
			}
		}
	}

	@Override
	public boolean equals( Object o ) {
		if ( this == o ) {
			return true;
		}
		if ( o == null || getClass() != o.getClass() ) {
			return false;
		}
		PropertyRenderingViewProcessor that = (PropertyRenderingViewProcessor) o;
		return Objects.equals( selector, that.selector ) &&
				Objects.equals( viewElementMode, that.viewElementMode );
	}

	@Override
	public int hashCode() {
		return Objects.hash( selector, viewElementMode );
	}

	@Autowired
	void setViewElementBuilderService( EntityViewElementBuilderService viewElementBuilderService ) {
		this.viewElementBuilderService = viewElementBuilderService;
	}

	/**
	 * Retrieve the property descriptors attached to an {@link EntityViewRequest}.
	 * Will register the {@link #ATTRIBUTE_PROPERTY_DESCRIPTORS} attribute on the model if it is not yet present.
	 *
	 * @param viewRequest request
	 * @return map of the property descriptors
	 */
	public static Map<String, EntityPropertyDescriptor> propertyDescriptors( @NonNull EntityViewRequest viewRequest ) {
		return propertyDescriptors( viewRequest.getModel() );
	}

	/**
	 * Retrieve the map property descriptors attached to an {@link EntityViewRequest}.
	 * Will register the {@link #ATTRIBUTE_PROPERTY_DESCRIPTORS} attribute on the model if it is not yet present.
	 *
	 * @param entityView entityView
	 * @return map of the property descriptors
	 */
	public static Map<String, EntityPropertyDescriptor> propertyDescriptors( @NonNull EntityView entityView ) {
		return propertyDescriptors( entityView.getModel() );
	}

	@SuppressWarnings("unchecked")
	private static Map<String, EntityPropertyDescriptor> propertyDescriptors( Map<String, Object> model ) {
		return (Map<String, EntityPropertyDescriptor>) model.computeIfAbsent( ATTRIBUTE_PROPERTY_DESCRIPTORS,
		                                                                      k -> new LinkedHashMap<String, EntityPropertyDescriptor>() );
	}

	/**
	 * Retrieve the {@link ViewElementBuilderMap} containing the registered {@link com.foreach.across.modules.web.ui.ViewElementBuilder}
	 * instances by property name. One is usually created automatically based on the {@link #propertyDescriptors(EntityView)} result
	 * during the {@link #createViewElementBuilders(EntityViewRequest, EntityView, ViewElementBuilderMap)}, but if none is present one
	 * will get created when calling this method.
	 * <p/>
	 * Conditionally checking if there is one should be done using
	 * {@code entityView.hasAttribute( PropertyRenderingViewProcessor.ATTRIBUTE_PROPERTY_BUILDERS )} instead.
	 *
	 * @param entityView onto which to register the builders
	 * @return builder map where the key is the property name, never {@code null}
	 */
	public static ViewElementBuilderMap propertyBuilders( @NonNull EntityView entityView ) {
		return (ViewElementBuilderMap) entityView
				.asMap()
				.computeIfAbsent( ATTRIBUTE_PROPERTY_BUILDERS, key -> new ViewElementBuilderMap() );
	}
}
